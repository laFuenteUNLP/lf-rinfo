{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "rinfo",
	"patterns": [ { "include": "#lf-rinfo" } ],
	"repository": {
		"lf-rinfo": {
			"patterns":[
				{ "include": "#control" },
				{ "include": "#operator" },
				{ "include": "#strings" },
				{ "include": "#number" },
				{ "include": "#comment" },
				{ "include": "#literal"}
			]
		},
		"control": {
			"patterns": [
				{
					"name": "keyword.control.ri",
					"match": "\\b(si|sino|mientras|repetir)\\b"
				},
				{
					"name": "keyword.other.ri",
					"match": "\\b(programa|procesos|proceso|robots|robot|areas|variables|comenzar|fin)\\b"
				},
				{
					"name": "variable.other.ri",
					"match": "\\b(mover|derecha|tomarFlor|depositarFlor|tomarPapel|depositarPapel)\\b"
				},
				{
					"name": "support.function.ri",
					"match": "\\b(HayFlorEnLaBolsa|HayFlorEnLaEsquina|HayPapelEnLaBolsa|HayPapelEnLaEsquina|PosCa|PosAv)\\b"
				}
			]
		},
		"operator": {
			"comment": "Captures operators and also puts them in different sub-groups that further describe them",
			"patterns": [{
					"match": "\\+|-|\\*|/",
					"name": "keyword.operator.arithmetic.ri"
				},{
					"match": "<|>|<=|>=|=|<>|!=",
					"name": "keyword.operator.comparison.ri"
				},{
					"match": "\\b(Pos|Informar|Leer|Iniciar|AsignarArea|AreaC)\\b",
					"name": "support.function.arithmetic.ri"
				},{
					"match": ":=",
					"name":"keyword.operator.assign.ri"
				},{
					"match": "(&|~)",
					"name": "keyword.operator.logical.ri"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.ri",
			"beginCaptures": { "0": { "name": "string.quoted.double.begin.ri" } },
			"endCaptures": { "0": { "name": "string.quoted.double.end.ri" } },
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.ri",
					"match": "\\\\."
				}
			]
		},
		"comment": {
			"patterns": [{
				"name": "comment.block.ri",
				"begin": "{",
				"end": "}",
				"patterns": [{"include": "#comment"}]
			}]
		},
		"literal": {
			"patterns": [
				{
					"name": "constant.language.ri",
					"match": "\\b(V|F|boolean|numero)\\b"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"comment": "Captures decimal numbers, with the negative sign being considered an operator",
					"match": "(-)?(?:((?:\\b\\d+(?:\\.\\d*)?|\\.\\d+)(?:\\b|e-?\\d+\\b)%?)|(\\$[0-9]+\\b))",
					"captures": {
						"1": { "name": "keyword.operator.arithmetic.ri" },
						"2": { "name": "constant.numeric.decimal.ri" },
						"3": { "name": "constant.numeric.hex.ri" }
					}
				}
			]
		}
	},
	"scopeName": "source.rinfo"
}
